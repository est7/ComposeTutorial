[
  {
    "id": "10001",
    "path": "tips_01",
    "desc": "不要在 non-compose 代码中调用 composable functions"
  },
  {
    "id": "10002",
    "path": "tips_02",
    "desc": "不要使用mutablelist 作为 state"
  },
  {
    "id": "10003",
    "path": "tips_03",
    "desc": "要根据现实情况把 State 记忆,使用 rememberSaveable 在配置更改（如旋转屏幕）后保留状态。"
  },
  {
    "id": "10004",
    "path": "tips_04",
    "desc": "在LazyColumn 中记得使用 key"
  },
  {
    "id": "10005",
    "path": "tips_05",
    "desc": "不要在外部 module 里使用 unstable class"
  },
  {
    "id": "100051",
    "path": "tips_05a",
    "desc": "不要在外部 module 里使用 unstable class,更多的扩展训练"
  },
  {
    "id": "10006",
    "path": "tips_06",
    "desc": "不要使用collectAsState(),而是 collectAsStateWithLifecycle"
  },
  {
    "id": "10007",
    "path": "tips_07",
    "desc": "记得在在Graphicslayer之内进行动画变换"
  },
  {
    "id": "10008",
    "path": "tips_08",
    "desc": "不要使用注入工具在screen 级别的compose 组件上创建viewmodel"
  },
  {
    "id": "10009",
    "path": "tips_09",
    "desc": "不要在子可组合项中设置扩展尺寸"
  },
  {
    "id": "10010",
    "path": "tips_10",
    "desc": "记得在重的 computations  compose中使用 remember"
  },
  {
    "id": "10011",
    "path": "tips_11",
    "desc": "不要过度使用硬编码 *.dp"
  },
  {
    "id": "10012",
    "path": "tips_12",
    "desc": "不要忘记设置触摸目标的大小"
  },
  {
    "id": "10013",
    "path": "tips_13",
    "desc": "记得检查 fragment 中的 decomposition 策略"
  },
  {
    "id": "10014",
    "path": "tips_14",
    "desc": "不要把入参命名方法混用"
  },
  {
    "id": "10015",
    "path": "tips_15",
    "desc": "不要忘记将colums/row设置为可滚动"
  },
  {
    "id": "10016",
    "path": "tips_16",
    "desc": "最好在 可组合项中写明 lambda 的名字"
  },
  {
    "id": "10017",
    "path": "tips_17",
    "desc": "避免错误使用rememberCoroutineScope"
  },
  {
    "id": "10018",
    "path": "tips_18",
    "desc": "涉及频繁变化的状态传递给子 composable 时，避免不必要的重新组合（recomposition）。"
  },
  {
    "id": "10019",
    "path": "tips_19",
    "desc": "如果可以，记得使用scaffold 的 paddingValues"
  },
  {
    "id": "10020",
    "path": "tips_20",
    "desc": "不要在可组合函数中使用 return"
  },
  {
    "id": "10021",
    "path": "tips_21",
    "desc": "利用 animate*AsState 系列函数为状态变化添加动画效果，提升用户体验。"
  },
  {
    "id": "10022",
    "path": "tips_22",
    "desc": "使用 `produceState` 将异步数据转换为 Compose 状态以简化数据加载"
  },
  {
    "id": "10023",
    "path": "tips_23",
    "desc": "利用 derivedStateOf 创建依赖于其他状态的状态，减少不必要的重组。"
  },
  {
    "id": "10024",
    "path": "tips_24",
    "desc": "利用 CompositionLocal 提供跨整个应用程序的依赖注入。 "
  },
  {
    "id": "10025",
    "path": "tips_25",
    "desc": "使用rememberUpdatedState"
  },
  {
    "id": "10026",
    "path": "tips_26",
    "desc": "使用lazyColumn 和 lazyRow 来加载大量数据"
  },
  {
    "id": "10027",
    "path": "tips_27",
    "desc": "注意callback 导致的 Compose 重新渲染"
  },
  {
    "id": "10028",
    "path": "tips_28",
    "desc": "使用rememberUpdatedState 第二阶段"
  }



]